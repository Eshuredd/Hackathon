version: "3.9"

services:
  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: grocery_scout
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/grocery_scout
      - REDIS_URL=redis://redis:6379/0
      - BROKER_URL=redis://redis:6379/1
      - FRONTEND_ORIGINS=http://localhost:3000,http://localhost:5173
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info"]
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/grocery_scout
      - REDIS_URL=redis://redis:6379/0
      - BROKER_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - celery-logs:/app/logs

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["celery", "-A", "app.celery_app", "beat", "--loglevel=info"]
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/grocery_scout
      - REDIS_URL=redis://redis:6379/0
      - BROKER_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - celery-beat-logs:/app/logs

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:80"
    env_file:
      - ./frontend/.env.local
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development Frontend (Hot reload)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    ports:
      - "5173:5173"
    env_file:
      - ./frontend/.env.local
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    profiles:
      - dev

  # Info/Helper service: prints accessible URLs to the terminal
  info:
    image: alpine:3.19
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    command:
      [
        "/bin/sh",
        "-c",
        "echo '\n=== Services are up ===' && echo 'Backend API : http://localhost:8000' && echo 'API Docs    : http://localhost:8000/docs' && if getent hosts host.docker.internal >/dev/null 2>&1; then :; fi && if nc -z localhost 5173 2>/dev/null; then echo 'Frontend    : http://localhost:5173'; else echo 'Frontend    : http://localhost:3000'; fi && echo '' && tail -f /dev/null",
      ]
    profiles:
      - ""

volumes:
  redis-data:
  postgres-data:
  backend-logs:
  celery-logs:
  celery-beat-logs:

networks:
  default:
    name: grocery-scout-network
